/* l4_util.h */
#include <stdio.h>
#include <string.h>
#include <string.h>

#define PHEX3_1 "F7E75FDC469067FFDC4E847C51F452DF"
#define QHEX3_1 "E85CED54AF57E53E092113E62F436F4F"
#define EHEX3_1 "0D88C3"

#define DHEX3_2 "74D806F9F3A62BAE331FFE3F0A68AFE35B3D2E4794148AACBC26AA381CD7D30D"
#define NHEX3_2 "DCBFFE3E51F62E09CE7032E2677A78946A849DC4CDDE3A4D0CB81629242FB1A5"
#define MHEX3_2 "4120746f702073656372657421"
#define EHEX3_2 "010001"

#define CHEX3_3 "8C0F971DF2F3672B28811407E2DABBE1DA0FEBBBDFC7DCB67396567EA1E2493F"

#define SIGHEX3_4 "239a09ea0d5fdaea94ec97130b1c74c89764226065bbe614da7fb9f851be7beabd5f8ece4b06c84c8bf49162e2c914fc8c8b6bd98b9ed086fb3bdb7f74fc5075424541fc8911c6c87953d5377d38fff94ecb0cb86018d3f00c5a1d418cf9e65e19dd56a947ae301fc73ffc9d513ece60e85373a4408f6958a466e41044a3b924d3e85c4ea6afaa86b2cfe388f70873d8513c1c10df65ccdfdb00cbd7d7a5f08dc7f3e5f40b500ac7913796dd11a71d88aaf53f728ab1584b80ea7e32e378679b247297df7b562b08efd4a56e1861f41dcd1d17d58e1015a8c5c580862167e884876ce72ff539e8da7397bd86cca42ac02576b778ad4a96943c6ae1b33f27a8dd"
#define MHEX3_4p1 "I owe you $2000"
#define MHEX3_4p2 "I owe you $3000"

#define MHEX3_5 "Launch a missle."
#define SHEX3_5 "643D6F34902D9C7EC90CB0B2BCA36C47FA37165C0005CAB026C0542CBDB6802F"
#define SHEX3_5p2 "643D6F34902D9C7EC90CB0B2BCA36C47FA37165C0005CAB026C0542CBDB6803F"
#define EHEX3_5 "010001"
#define NHEX3_5 "AE1CD4DC432798D933779FBD46C6E1247F0CF1233595113AA51B450F18116115"

#define EHEX3_6 "010001"
#define PHEX3_6 "B6E02FC22406C86D045FD7EF0A6406B27D22266516AE42409BCEDC9F9F76073EC330558719B94F940E5A941F5556B4C2022AAFD098EE0B40D7C4D03B72C8149EEF90B111A9AED2C8B8433AD90B0BD5D595F540AFC81DED4D9C5F57B786506899F58ADAD2C7051FA897C9DCA4B182842DC6ADA59CC71982A6850F5E44582A378FFD35F10B0827325AF5BB8B9EA4BD51D027E2DD3B4233A30528C4BB28CC9AAC2B230D78C67BE65E71B74A3E08FB81B71616A19D23124DE5D79208AC75A49CBACD17B21E4435657F532539D11C0A9A631B199274680A37C2C25248CB395AA2B6E15DC1DDA020B821A293266F144A2141C7ED6D9BF2482FF303F5A26892532F5EE3"
#define SHEX3_6 "84a89a11a7d8bd0b267e52247bb2559dea30895108876fa9ed10ea5b3e0bc72d47044edd4537c7cabc387fb66a1c65426a73742e5a9785d0cc92e22e3889d90d69fa1b9bf0c16232654f3d98dbdad666da2a5656e31133ece0a5154cea7549f45def15f5121ce6f8fc9b04214bcf63e77cfcaadcfa43d0c0bbf289ea916dcb858e6a9fc8f994bf553d4282384d08a4a70ed3654d3361900d3f80bf823e11cb8f3fce7994691bf2da4bc897b811436d6a2532b9b2ea2262860da3727d4fea573c653b2f2773fc7c16fb0d03a40aed01aba423c68d5f8a21154292c034a220858858988919b11e20ed13205c045564ce9db365fdf68f5e99392115e271aa6a8882"

//https://lenvoie.com/
//mod (pub key)
//#define PHEX3_6 "00CC18A9536E4C0B184056439E335628D7451AF9452221D4C7F7A924BD538C1739F2BB7401EFF9703309331B52005A554D949DB8398E508DE2A8CE17CAFDDBC42E1D9B0653E1B46A3F9DD66885C444436BC4A072EF1F299BBABB3C80865A11011B2A64E93114FF3D2962085DA877EC0B760CC7D69118D6331D1353AD7E28D53E46BAC41F48A2FA003C29DD742D96D2130CC661B81FE2D04CD056DD8CED72BB273BDF6E7231A8E0F80C5840252404F146FFE6AE94E8A2BCF103AEDB82C72F7E6B611C2FB5884572E05B29F13889D6DB92C1FD310A6F63B7DE01E33952C6D091A217D801F9D67BEC2FCD4E766DD43EBF809DBFFFC7CA031E40B65A9048DC04250BA1"

//sig
//#define SHEX3_6 "5195f01926b63f372f730ee5cd8b94868858d16e66dac5a031e99a485066b1d7e08208a15195d3b787ce39290155edb236d59d58cac0bfe7949d5b323b42b2bfbd670080ad771d22182b51711a5b5a763731b7354bfcb5f35e1fc306f62fd04752ce3ca3864dde5a0f51ac26fe1ee5f5fcd5420389651e69f09504e42844197ff3f61ca345593e028d69fedfc9eff2cab5fdf43c23acb6970bbd46d464087a827fbdcfb212e7da7ed86149bff58a8fada774273c651241ab93c5cc92bce2ba99acac7760885239ef3c8329eb649a9a754fbdaf608ddeb511193b73c079f78ec8e7e1896d897673c5665bece6028517ca0f3188b05ed5a551771988afda77f4a3"






#define NBITS 256

BIGNUM *RSA_get_priv(BIGNUM* p, BIGNUM* q, BIGNUM* e){
    BN_CTX *ctx = BN_CTX_new();
    BIGNUM* p_minus_one = BN_new();
    BIGNUM* q_minus_one = BN_new();
    BIGNUM* one = BN_new();
    BIGNUM* ret = BN_new();

    BN_dec2bn(&one, "1");
    BN_sub(p_minus_one, p, one);
    BN_sub(q_minus_one, q, one);
    BN_mul(ret, p_minus_one, q_minus_one, ctx);

    BIGNUM* res = BN_new();
    BN_mod_inverse(res, e, ret, ctx);
    BN_CTX_free(ctx);
    return res;
}

void printBN(char *msg, BIGNUM * a)
{
    /* Use BN_bn2hex(a) for hex string
     *
     * * Use BN_bn2dec(a) for decimal string */
    char * number_str = BN_bn2hex(a);
    printf("%s %s\n", msg, number_str);
    OPENSSL_free(number_str);
}

BIGNUM* RSA_ENC(BIGNUM* message, BIGNUM* mod, BIGNUM* pub_key){
    BN_CTX *ctx = BN_CTX_new();
    BIGNUM* enc = BN_new();
    BN_mod_exp(enc, message, mod, pub_key, ctx);
    BN_CTX_free(ctx);
    return enc;
}

BIGNUM* RSA_DEC(BIGNUM* enc, BIGNUM* priv_key, BIGNUM* pub_key){
    BN_CTX *ctx = BN_CTX_new();
    BIGNUM* dec = BN_new();
    BN_mod_exp(dec, enc, priv_key, pub_key, ctx);
    BN_CTX_free(ctx);
    return dec;
}
int hex2int(char c){
    // return (int)strtol(c, NULL, 16);
    if (c >= 97)
        c = c - 32;
    int first = c / 16 - 3;
    int second = c % 16;
    int res = first * 10 + second;
    if (res > 9) res--;
    return res;
}

int hex2ascii(const char c, const char d){return (hex2int(c) * 16) + hex2int(d);}

void printHEX(const char* st){
    int length = strlen(st);
    if (length % 2 != 0) {
        printf("%s\n", "hex length needs to be even.");
        return;
    }
    int i;
    char buf = 0;
    for(i = 0; i < length; i++) {
        if(i % 2 != 0)
            printf("%c", hex2ascii(buf, st[i]));
        else
            buf = st[i];
    }
    printf("\n");
}
